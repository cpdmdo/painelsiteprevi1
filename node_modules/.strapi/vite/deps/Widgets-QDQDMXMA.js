import {
  StageColumn
} from "./chunk-ZD3TQL7K.js";
import "./chunk-2K2EIEHT.js";
import {
  useGetRecentlyAssignedDocumentsQuery
} from "./chunk-VIUETYOM.js";
import "./chunk-IAJEFGCW.js";
import "./chunk-UTG6SM4C.js";
import "./chunk-LZU223BE.js";
import "./chunk-37RGHUA5.js";
import {
  DocumentStatus,
  RelativeTime
} from "./chunk-YCZER35L.js";
import "./chunk-LYNE4YQL.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-LYPE7NOJ.js";
import "./chunk-RFHZOUS3.js";
import "./chunk-OYQ3JBGT.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-CZPMH4Z3.js";
import "./chunk-FW6YDHTI.js";
import "./chunk-FUXBAFSB.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-M3BUF75D.js";
import "./chunk-WKRLBAHL.js";
import {
  Widget
} from "./chunk-6WEAAINO.js";
import "./chunk-FLTPYCLM.js";
import "./chunk-PSHXITO4.js";
import "./chunk-QIJGNK42.js";
import "./chunk-MTJ2T5LZ.js";
import "./chunk-IMOI3E47.js";
import "./chunk-YFX4REIS.js";
import "./chunk-LUMWU6JO.js";
import "./chunk-MGAGVPD3.js";
import "./chunk-VOMDN2HB.js";
import "./chunk-WUVHU5J5.js";
import "./chunk-W4DC4TFI.js";
import "./chunk-ELTJVSGP.js";
import "./chunk-JBXQL3NF.js";
import "./chunk-6GWDPKB3.js";
import "./chunk-EMIP5S33.js";
import "./chunk-UHGWPAGW.js";
import "./chunk-6VOBJMV5.js";
import "./chunk-YKPYLRND.js";
import "./chunk-NFBYU4QD.js";
import "./chunk-KEZRN4WR.js";
import "./chunk-N427OOH6.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-2EHB33PN.js";
import "./chunk-BYI2GZFR.js";
import "./chunk-K65KIEAL.js";
import "./chunk-5RDCNDRC.js";
import "./chunk-WFREGWG6.js";
import "./chunk-3NVPER6K.js";
import "./chunk-CJYWQ3XL.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-M52JAITN.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-2RKWJ7FR.js";
import "./chunk-QDH6BVEL.js";
import {
  useTracking
} from "./chunk-G6CJ7XT7.js";
import "./chunk-P2O6JYI4.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-4AVDLRAC.js";
import "./chunk-KVOXAC2C.js";
import "./chunk-3XFDDFRS.js";
import "./chunk-7YJFUHDK.js";
import "./chunk-72HNJEYV.js";
import "./chunk-FC7EBR5O.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-HIZNLJEH.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1z
} from "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/review-workflows/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({ documents, type }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome", {
      entryType: type
    });
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 6,
    rowCount: (documents == null ? void 0 : documents.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(document),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: document.title,
              variant: "omega",
              textColor: "neutral800",
              children: document.title
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              variant: "omega",
              textColor: "neutral600",
              children: document.kind === "singleType" ? formatMessage({
                id: "content-manager.widget.last-edited.single-type",
                defaultMessage: "Single-Type"
              }) : formatMessage({
                id: document.contentTypeDisplayName,
                defaultMessage: document.contentTypeDisplayName
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, {
                status: document.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              textColor: "neutral600",
              children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(document.updatedAt)
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(StageColumn, {
              strapi_stage: document.strapi_stage
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(document),
                onClick: () => trackUsage("willEditEntryFromHome", {
                  entryType: type
                }),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
              })
            })
          })
        ]
      }, document.documentId))
    })
  });
};
var AssignedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "review-workflows.widget.assigned.no-data",
        defaultMessage: "No entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data,
    type: "assigned"
  });
};
export {
  AssignedWidget
};
//# sourceMappingURL=Widgets-QDQDMXMA.js.map
